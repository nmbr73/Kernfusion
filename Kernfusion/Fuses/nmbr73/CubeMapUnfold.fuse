--[[--

Copyright (c) 2021 nmbr73 (https://www.youtube.com/c/nmbr73/)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the “Software”), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
IN THE SOFTWARE.

--]]--


-- Unfold a horizonzal cross texture into a horizontal cross texture.
-- So obviously this fuse is of no practical use and exists just for
-- explanation and testing/debugging purposes.


-------------------------------------------------------------------------------------------------------------------------------------------

FuRegisterClass("CubeMapUnfold_nmbr73", CT_SourceTool, {
    REGS_Name = "CubeMap Unfold",
	  REGS_Category = "Fuses\\Kernfusion\\nmbr73",
    REGS_OpDescription = "Display a crossmap 2D textur as a crossmap 2D texture. Looks a bit weird, but is useful to debug DCTL code for such a cubemap representation.",
	  REGS_OpIconString = "73",
    REG_Source_GlobalCtrls = true,
    REG_Source_SizeCtrls = true,
    REG_Source_AspectCtrls = true,
    REG_Source_DepthCtrls = true,
	  REG_TimeVariant = false,
	  REGS_Company = "nmbr73",
	  REGS_URL = "https://nmbr73.github.io/",
	  REG_Version	= 000001,
    REG_Fuse_NoEdit = false,
    REG_Fuse_NoReload = false,
    })



-------------------------------------------------------------------------------------------------------------------------------------------

ParametersCode =
[[
  float in_width;
  float in_height;

  float out_width;
  float out_height;
]]

-------------------------------------------------------------------------------------------------------------------------------------------

CompatibilityCode =
[[

__DEVICE__ float4 cubemap(__TEXTURE2D__ t, float3 xyz)
{
  float ax=_fabs(xyz.x);
  float ay=_fabs(xyz.y);
  float az=_fabs(xyz.z);

  if (xyz.x>0.0f && ax>=ay && ax>=az) // +X, Face 0, right
    return _tex2DVecN(t,(-xyz.z/ax+1.0f)/8.0f + 0.5f,(xyz.y/ax+1.0f)/6.0f + (1.0f/3.0f),15);

  if (xyz.y>0.0f && ay>=ax && ay>=az) // +Y, Face 2, top
    return _tex2DVecN(t,(xyz.x/ay+1.0f)/8.0f + 0.25f,(-xyz.z/ay+1.0f)/6.0f + (2.0f/3.0f),15);

  if (xyz.z>0.0f && az>=ax && az>=ay) // +Z, Face 4, front
    return _tex2DVecN(t,(xyz.x/az+1.0f)/8.0f + 0.25f,(xyz.y/az+1.0f)/6.0f + (1.0f/3.0f),15);

  if (xyz.x<0.0f && ax>=ay && ax>=az) // -X, Face 1, left
    return _tex2DVecN(t,(xyz.z/ax+1.0f)/8.0f,(xyz.y/ax+1.0f)/6.0f + (1.0f/3.0f),15);

  if (xyz.y<0.0f && ay>=ax && ay>=az) // -Y, Face 3, bottom
    return _tex2DVecN(t,(xyz.x/ay+1.0f)/8.0f + 0.25f,(xyz.z/ay+1.0f)/6.0f,15);

  if (xyz.z<0.0f && az>=ax && az>=ay) // -Z, Face 5, back
    return _tex2DVecN(t,(-xyz.x/az+1.0f)/8.0f + 0.75f,(xyz.y/az+1.0f)/6.0f + (1.0f/3.0f),15);

  return to_float4(1.0f,0.0f,0.0f,1.0f); // error
}


]]

-------------------------------------------------------------------------------------------------------------------------------------------


KernelCode =
[[

#if defined(DEVICE_IS_METAL) || defined(DEVICE_IS_CUDA) || defined(DEVICE_IS_OPENCL)
#define DCTL
#endif

#ifdef DCTL
  typedef float2 vec2;
  typedef float3 vec3;
  typedef float4 vec4;
  #define make_vec2(A,B)      make_float2(A,B)
  #define make_vec3(A,B,C)    make_float3(A,B,C)
  #define make_vec4(A,B,C,D)  make_float4(A,B,C,D)
  #define make_vec4_aw(V,F)   make_float4_aw(V,F)
  #define in
  #define out
  #define DEVICE  __DEVICE__
  #define write_color(T,X,Y,C) _tex2DVec4Write((T), (X), (Y), (C));
#else
  #define cubemap(M,XYZ)      texture(M,XYZ)
  #define make_vec2(A,B)      vec2(A,B)
  #define make_vec3(A,B,C)    vec3(A,B,C)
  #define make_vec4(A,B,C,D)  vec4(A,B,C,D)
  #define make_vec4_aw(V,F)   vec4(V,F)
  #define DEVICE
  #define write_color(T,X,Y,C)
#endif


DEVICE vec3 unfold(in vec2 coord, in vec3 res)
{
  float x = coord.x;
  float y = coord.y;
  float w = res.x;
  float h = res.y;


  float nX,nY,nZ; // nomalized coordinates

  // face
  //
  //    Determining the index (face) to use from the
  //    cubemap to display it in one of the tiles
  //    of the horizontal cross texture. To do so
  //    row and column are calculated and then mapped
  //    to the respective index.

  // row, col
  //
  //    We separate our output into 4x3 tiles, so if
  //    1/4 are the columns and 1/3 the rows. Dividing
  //    our xy-Coordinate accordingly, we know which
  //    tile (resp. row and column) die coordinate falls
  //    into.

  // map
  //
  //    Using the numbers (indices) 1 for the left,
  //    4 for the front, 0 for the right, 5 for the
  //    back, 2 for the top and 3 for the bottom face
  //    of the cube is a commonly used scheme.



  nX = x/w;   // x normalized to [0..1]
  nY = y/h;  // y normalized to [0..1]

  int col = int(floor(nX / (1.0f / 4.0f))); // 0|1|2|3
  int row = int(floor(nY / (1.0f / 3.0f))); // 0|1|2


  // Origin of our coordinate system is in the lower left
  // therefore face 2 (top) is on the last line (the bottom)
  // and face 3 (bottom) on the first line (the top) of
  // the mapping.

  // Arrays of arrays supported in GLSL ES 3.10 only
  // and array initialization does also look a bit strange.


  #ifdef DCTL

  const int map[] = {
      -1,  3, -2, -4 ,
      1,  4,  0,  5 ,
      -4,  2, -5, -6
  };

  #else

  const int map[] = int[3*4](
      -1,  3, -2, -4 ,
      1,  4,  0,  5 ,
      -4,  2, -5, -6
  );

  #endif


  int face = map[row*4+col];

  float u;
  float v;

  if (row == 1) {
    // row 1 -> col is 0|1|2|3
    u = (nX - 0.0f ) * 4.0f; v = (nY - float(row) / 3.0f) * 3.0f;
    u = u - float(col) * 1.0f;
  } else {
    // row is 0 or 2 -> col is 1 and only 1
    u = (nX - 0.25f) * 4.0f; v = (nY - float(row) / 3.0f) * 3.0f;
  }

  u = 2.0f * u - 1.0f; v = 2.0f * v - 1.0f;

  nX=nY=nZ=0.0f; // normalized to [-1..1]


  switch (face) {
    case 1: nX= -1.0f ; nY=   v   ; nZ=    u   ; break; // -X, row 1, col 0
    case 4: nX=   u   ; nY=   v   ; nZ=   1.0f ; break; // +Z, row 1, col 1
    case 0: nX=  1.0  ; nY=   v   ; nZ=   -u   ; break; // +X, row 1, col 2
    case 5: nX=  -u   ; nY=   v   ; nZ=  -1.0f ; break; // -Z, row 1, col 3
    case 2: nX=   u   ; nY=  1.0f ; nZ=   -v   ; break; // +Y, row 0, col 1
    case 3: nX=   u   ; nY= -1.0f ; nZ=    v   ; break; // -Y, row 2, col 1
    default:
      break;
  }


  return make_vec3(nX,nY,nZ);
}


#ifdef DCTL

__KERNEL__ void CubeMapUnfoldKernel(__CONSTANTREF__ Params*  params,  __TEXTURE2D__ iChannel0, __TEXTURE2D_WRITE__ dst)
{
  DEFINE_KERNEL_ITERATORS_XY(x, y);

  if (x >= params->out_width || y >= params->out_height)
    return;

  vec4 fragColor;
  vec2 fragCoord = make_vec2(x,y);
  vec3 iResolution = make_vec3(params->out_width,params->out_height,1.0f);

#else

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{

#endif

  // -----

  vec3 xyz = unfold(fragCoord, iResolution);
  fragColor   = vec4(1.0f, 0.0f, 0.0f, 0.0f);

  if ((xyz.x != 0.0f) || (xyz.y != 0.0f) || (xyz.z != 0.0f)) {
    fragColor = cubemap(iChannel0,xyz);
    fragColor.w=1.0f;
  }

  // -----

  write_color(dst, x, y, fragColor)

}


]]
-- /*



-------------------------------------------------------------------------------------------------------------------------------------------

function Create()


  ----- In/Out

  InChannel0 = self:AddInput( "iChannel0",  "iChannel0",  { LINKID_DataType = "Image", LINK_Main = 1, INP_Required = false  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main       = 1,
  })

  ----- Inspector Panel Controls

  self:AddControlPage("Image")

  InGlobalIn  = self:AddInput("Global In",  "GlobalIn",  { LINKID_DataType = "Number", })
  InGlobalOut = self:AddInput("Global Out", "GlobalOut", { LINKID_DataType = "Number", })

end



-------------------------------------------------------------------------------------------------------------------------------------------

function Process(req)

  local imgattrs = {
    IMG_Document = self.Comp,
    { IMG_Channel = "Red", },
    { IMG_Channel = "Green", },
    { IMG_Channel = "Blue", },
    { IMG_Channel = "Alpha", },
    IMG_Width  = Width,
    IMG_Height = Height,
    IMG_XScale = XAspect,
    IMG_YScale = YAspect,
    IMG_Quality = not req:IsQuick(),
    IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
    IMG_DeferAlloc = true,
    IMG_ProxyScale = ( (not req:IsStampOnly()) and 1 or nil),
    IMG_Depth = ( (SourceDepth~=0) and SourceDepth or nil   )
  }

  local dst   = Image(imgattrs)
  local black = Pixel({R=0,G=0,B=0,A=0})
  dst:Fill(black)

  if req:IsPreCalc() then
    local out = Image({IMG_Like = dst, IMG_NoData = true})
    OutImage:Set(req, out)
    return
  end

  local node = DVIPComputeNode(req,
    "CubeMapUnfoldKernel", CompatibilityCode..KernelCode,
    "Params", ParametersCode
  )

  -- Extern texture or create a new one

  iChannel0 = InChannel0:GetValue(req)

  if iChannel0==nil then
    iChannel0 = Image(imgattrs)
    iChannel0:Fill(black)
  end

  -- DCTL parameters

  local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate")

  local params = {}

  params = node:GetParamBlock(ParametersCode)

  params.in_width = iChannel0.Width
  params.in_height = iChannel0.Height

  params.out_width  = dst.Width
  params.out_height = dst.Height



  -- Set parameters and add I/O

  node:SetParamBlock(params)
  node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
  node:AddInput("iChannel0",iChannel0)
  node:AddOutput("dst", dst)

  local ok = node:RunSession(req)

	if (not ok) then
		dst = nil
    dump(node:GetErrorLog())
	end

  OutImage:Set(req,dst)
end



-- // ------------------------------------------------------------------------
-- // Callback
-- // ------------------------------------------------------------------------

-- function NotifyChanged(inp, param, time)
-- 	if (param ~= nil) then
-- 		if (param.Value == 1) then
-- 			if (inp == ...) then
--         ...
-- 			end
-- 		end
-- 	end
-- end
